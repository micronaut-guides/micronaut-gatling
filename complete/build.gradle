import groovy.json.JsonSlurper

plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "java"
    id "scala"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id 'com.github.psxpaul.execfork' version '0.1.13'
    id "com.github.lkishalmi.gatling" version "3.2.9"
}

version "0.1"
group "mn.gatlin"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:2.0.0'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-management"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testCompile('io.gatling.highcharts:gatling-charts-highcharts:3.0.3')

}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "example.micronaut.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

task startMicronaut(type: com.github.psxpaul.task.JavaExecFork) {
    dependsOn ':assemble'
    classpath = sourceSets.main.runtimeClasspath
    main = 'example.micronaut.Application'
    jvmArgs = [ '-Xmx500m', '-Djava.awt.headless=true' ]
    workingDir = "$buildDir/server"
    standardOutput = "$buildDir/daemon.log"
    errorOutput = "$buildDir/daemon-error.log"
    waitForPort = 8080
}


task waitUntilMicronautIsUp {
    dependsOn startMicronaut
    description = 'Call the /health endpoint and wait until it responds with the status UP.'
    group = 'Load Test'
    doLast {
        String url = 'http://localhost:8080/health'
        boolean success = false
        int count = 0
        while (count < 15 && !success) {
            logger.quiet("Trying to connect to ${url}: Attempt number=$count")
            try {
                count += 1
                JsonSlurper jsonSlurper = new JsonSlurper()
                String responceBody = url.toURL().text
                Object result = jsonSlurper.parseText(responceBody)
                Map jsonResult = (Map) result
                String status = (String) jsonResult.get('status')
                success = (status == 'UP')
            }
            catch (all) {
                sleep(2 * 1000) // wait for another 2 seconds until next retry
            }
        }
        if (success) {
            logger.quiet("SUCCEFULLY Connected to ${url}")
        } else {
            logger.quiet("FAILED to Connected to ${url}")
        }
    }
}

gatlingRun {
    dependsOn waitUntilMicronautIsUp
    finalizedBy stopMicronaut
}
